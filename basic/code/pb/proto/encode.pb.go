// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: encode.proto

package pbTest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Test1 struct {
	A                    *int32   `protobuf:"varint,1,req,name=a" json:"a,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test1) Reset()      { *m = Test1{} }
func (*Test1) ProtoMessage() {}
func (*Test1) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{0}
}
func (m *Test1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test1.Merge(dst, src)
}
func (m *Test1) XXX_Size() int {
	return m.Size()
}
func (m *Test1) XXX_DiscardUnknown() {
	xxx_messageInfo_Test1.DiscardUnknown(m)
}

var xxx_messageInfo_Test1 proto.InternalMessageInfo

func (m *Test1) GetA() int32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

type Test2 struct {
	B                    *string  `protobuf:"bytes,2,req,name=b" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test2) Reset()      { *m = Test2{} }
func (*Test2) ProtoMessage() {}
func (*Test2) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{1}
}
func (m *Test2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test2.Merge(dst, src)
}
func (m *Test2) XXX_Size() int {
	return m.Size()
}
func (m *Test2) XXX_DiscardUnknown() {
	xxx_messageInfo_Test2.DiscardUnknown(m)
}

var xxx_messageInfo_Test2 proto.InternalMessageInfo

func (m *Test2) GetB() string {
	if m != nil && m.B != nil {
		return *m.B
	}
	return ""
}

type Test3 struct {
	C                    *Test1   `protobuf:"bytes,3,req,name=c" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test3) Reset()      { *m = Test3{} }
func (*Test3) ProtoMessage() {}
func (*Test3) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{2}
}
func (m *Test3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test3.Merge(dst, src)
}
func (m *Test3) XXX_Size() int {
	return m.Size()
}
func (m *Test3) XXX_DiscardUnknown() {
	xxx_messageInfo_Test3.DiscardUnknown(m)
}

var xxx_messageInfo_Test3 proto.InternalMessageInfo

func (m *Test3) GetC() *Test1 {
	if m != nil {
		return m.C
	}
	return nil
}

type Test4 struct {
	D                    []int32  `protobuf:"varint,4,rep,packed,name=d" json:"d,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test4) Reset()      { *m = Test4{} }
func (*Test4) ProtoMessage() {}
func (*Test4) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{3}
}
func (m *Test4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test4.Merge(dst, src)
}
func (m *Test4) XXX_Size() int {
	return m.Size()
}
func (m *Test4) XXX_DiscardUnknown() {
	xxx_messageInfo_Test4.DiscardUnknown(m)
}

var xxx_messageInfo_Test4 proto.InternalMessageInfo

func (m *Test4) GetD() []int32 {
	if m != nil {
		return m.D
	}
	return nil
}

type Test5 struct {
	E                    []string `protobuf:"bytes,5,rep,name=e" json:"e,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test5) Reset()      { *m = Test5{} }
func (*Test5) ProtoMessage() {}
func (*Test5) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{4}
}
func (m *Test5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test5.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test5.Merge(dst, src)
}
func (m *Test5) XXX_Size() int {
	return m.Size()
}
func (m *Test5) XXX_DiscardUnknown() {
	xxx_messageInfo_Test5.DiscardUnknown(m)
}

var xxx_messageInfo_Test5 proto.InternalMessageInfo

func (m *Test5) GetE() []string {
	if m != nil {
		return m.E
	}
	return nil
}

type Test6 struct {
	F                    *int32   `protobuf:"varint,6,opt,name=f" json:"f,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test6) Reset()      { *m = Test6{} }
func (*Test6) ProtoMessage() {}
func (*Test6) Descriptor() ([]byte, []int) {
	return fileDescriptor_encode_d34d9b25a65c94c4, []int{5}
}
func (m *Test6) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test6.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Test6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test6.Merge(dst, src)
}
func (m *Test6) XXX_Size() int {
	return m.Size()
}
func (m *Test6) XXX_DiscardUnknown() {
	xxx_messageInfo_Test6.DiscardUnknown(m)
}

var xxx_messageInfo_Test6 proto.InternalMessageInfo

func (m *Test6) GetF() int32 {
	if m != nil && m.F != nil {
		return *m.F
	}
	return 0
}

func init() {
	proto.RegisterType((*Test1)(nil), "pbRelation.Test1")
	proto.RegisterType((*Test2)(nil), "pbRelation.Test2")
	proto.RegisterType((*Test3)(nil), "pbRelation.Test3")
	proto.RegisterType((*Test4)(nil), "pbRelation.Test4")
	proto.RegisterType((*Test5)(nil), "pbRelation.Test5")
	proto.RegisterType((*Test6)(nil), "pbRelation.Test6")
}
func (this *Test1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test1)
	if !ok {
		that2, ok := that.(Test1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test1 but is not nil && this == nil")
	}
	if this.A != nil && that1.A != nil {
		if *this.A != *that1.A {
			return fmt.Errorf("A this(%v) Not Equal that(%v)", *this.A, *that1.A)
		}
	} else if this.A != nil {
		return fmt.Errorf("this.A == nil && that.A != nil")
	} else if that1.A != nil {
		return fmt.Errorf("A this(%v) Not Equal that(%v)", this.A, that1.A)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test1)
	if !ok {
		that2, ok := that.(Test1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.A != nil && that1.A != nil {
		if *this.A != *that1.A {
			return false
		}
	} else if this.A != nil {
		return false
	} else if that1.A != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test2)
	if !ok {
		that2, ok := that.(Test2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test2 but is not nil && this == nil")
	}
	if this.B != nil && that1.B != nil {
		if *this.B != *that1.B {
			return fmt.Errorf("B this(%v) Not Equal that(%v)", *this.B, *that1.B)
		}
	} else if this.B != nil {
		return fmt.Errorf("this.B == nil && that.B != nil")
	} else if that1.B != nil {
		return fmt.Errorf("B this(%v) Not Equal that(%v)", this.B, that1.B)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test2)
	if !ok {
		that2, ok := that.(Test2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.B != nil && that1.B != nil {
		if *this.B != *that1.B {
			return false
		}
	} else if this.B != nil {
		return false
	} else if that1.B != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test3)
	if !ok {
		that2, ok := that.(Test3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test3 but is not nil && this == nil")
	}
	if !this.C.Equal(that1.C) {
		return fmt.Errorf("C this(%v) Not Equal that(%v)", this.C, that1.C)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test3) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test3)
	if !ok {
		that2, ok := that.(Test3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.C.Equal(that1.C) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test4) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test4)
	if !ok {
		that2, ok := that.(Test4)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test4")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test4 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test4 but is not nil && this == nil")
	}
	if len(this.D) != len(that1.D) {
		return fmt.Errorf("D this(%v) Not Equal that(%v)", len(this.D), len(that1.D))
	}
	for i := range this.D {
		if this.D[i] != that1.D[i] {
			return fmt.Errorf("D this[%v](%v) Not Equal that[%v](%v)", i, this.D[i], i, that1.D[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test4)
	if !ok {
		that2, ok := that.(Test4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.D) != len(that1.D) {
		return false
	}
	for i := range this.D {
		if this.D[i] != that1.D[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test5) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test5)
	if !ok {
		that2, ok := that.(Test5)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test5")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test5 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test5 but is not nil && this == nil")
	}
	if len(this.E) != len(that1.E) {
		return fmt.Errorf("E this(%v) Not Equal that(%v)", len(this.E), len(that1.E))
	}
	for i := range this.E {
		if this.E[i] != that1.E[i] {
			return fmt.Errorf("E this[%v](%v) Not Equal that[%v](%v)", i, this.E[i], i, that1.E[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test5) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test5)
	if !ok {
		that2, ok := that.(Test5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.E) != len(that1.E) {
		return false
	}
	for i := range this.E {
		if this.E[i] != that1.E[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test6) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Test6)
	if !ok {
		that2, ok := that.(Test6)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Test6")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Test6 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Test6 but is not nil && this == nil")
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return fmt.Errorf("F this(%v) Not Equal that(%v)", *this.F, *that1.F)
		}
	} else if this.F != nil {
		return fmt.Errorf("this.F == nil && that.F != nil")
	} else if that1.F != nil {
		return fmt.Errorf("F this(%v) Not Equal that(%v)", this.F, that1.F)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Test6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Test6)
	if !ok {
		that2, ok := that.(Test6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.F != nil && that1.F != nil {
		if *this.F != *that1.F {
			return false
		}
	} else if this.F != nil {
		return false
	} else if that1.F != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Test1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test1{")
	if this.A != nil {
		s = append(s, "A: "+valueToGoStringEncode(this.A, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Test2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test2{")
	if this.B != nil {
		s = append(s, "B: "+valueToGoStringEncode(this.B, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Test3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test3{")
	if this.C != nil {
		s = append(s, "C: "+fmt.Sprintf("%#v", this.C)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Test4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test4{")
	if this.D != nil {
		s = append(s, "D: "+fmt.Sprintf("%#v", this.D)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Test5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test5{")
	if this.E != nil {
		s = append(s, "E: "+fmt.Sprintf("%#v", this.E)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Test6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pbRelation.Test6{")
	if this.F != nil {
		s = append(s, "F: "+valueToGoStringEncode(this.F, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEncode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Test1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.A == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("a")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEncode(dAtA, i, uint64(*m.A))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Test2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.B == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("b")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEncode(dAtA, i, uint64(len(*m.B)))
		i += copy(dAtA[i:], *m.B)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Test3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.C == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("c")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEncode(dAtA, i, uint64(m.C.Size()))
		n1, err := m.C.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Test4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.D) > 0 {
		dAtA3 := make([]byte, len(m.D)*10)
		var j2 int
		for _, num1 := range m.D {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintEncode(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Test5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test5) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.E) > 0 {
		for _, s := range m.E {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Test6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test6) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEncode(dAtA, i, uint64(*m.F))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEncode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTest1(r randyEncode, easy bool) *Test1 {
	this := &Test1{}
	v1 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v1 *= -1
	}
	this.A = &v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 2)
	}
	return this
}

func NewPopulatedTest2(r randyEncode, easy bool) *Test2 {
	this := &Test2{}
	v2 := string(randStringEncode(r))
	this.B = &v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 3)
	}
	return this
}

func NewPopulatedTest3(r randyEncode, easy bool) *Test3 {
	this := &Test3{}
	this.C = NewPopulatedTest1(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 4)
	}
	return this
}

func NewPopulatedTest4(r randyEncode, easy bool) *Test4 {
	this := &Test4{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.D = make([]int32, v3)
		for i := 0; i < v3; i++ {
			this.D[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.D[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 5)
	}
	return this
}

func NewPopulatedTest5(r randyEncode, easy bool) *Test5 {
	this := &Test5{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.E = make([]string, v4)
		for i := 0; i < v4; i++ {
			this.E[i] = string(randStringEncode(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 6)
	}
	return this
}

func NewPopulatedTest6(r randyEncode, easy bool) *Test6 {
	this := &Test6{}
	if r.Intn(10) != 0 {
		v5 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.F = &v5
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEncode(r, 7)
	}
	return this
}

type randyEncode interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEncode(r randyEncode) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEncode(r randyEncode) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneEncode(r)
	}
	return string(tmps)
}
func randUnrecognizedEncode(r randyEncode, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEncode(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEncode(dAtA []byte, r randyEncode, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEncode(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEncode(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Test1) Size() (n int) {
	var l int
	_ = l
	if m.A != nil {
		n += 1 + sovEncode(uint64(*m.A))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test2) Size() (n int) {
	var l int
	_ = l
	if m.B != nil {
		l = len(*m.B)
		n += 1 + l + sovEncode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test3) Size() (n int) {
	var l int
	_ = l
	if m.C != nil {
		l = m.C.Size()
		n += 1 + l + sovEncode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test4) Size() (n int) {
	var l int
	_ = l
	if len(m.D) > 0 {
		l = 0
		for _, e := range m.D {
			l += sovEncode(uint64(e))
		}
		n += 1 + sovEncode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test5) Size() (n int) {
	var l int
	_ = l
	if len(m.E) > 0 {
		for _, s := range m.E {
			l = len(s)
			n += 1 + l + sovEncode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Test6) Size() (n int) {
	var l int
	_ = l
	if m.F != nil {
		n += 1 + sovEncode(uint64(*m.F))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEncode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEncode(x uint64) (n int) {
	return sovEncode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Test1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test1{`,
		`A:` + valueToStringEncode(this.A) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Test2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test2{`,
		`B:` + valueToStringEncode(this.B) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Test3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test3{`,
		`C:` + strings.Replace(fmt.Sprintf("%v", this.C), "Test1", "Test1", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Test4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test4{`,
		`D:` + fmt.Sprintf("%v", this.D) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Test5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test5{`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Test6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Test6{`,
		`F:` + valueToStringEncode(this.F) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEncode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Test1) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.A = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("a")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test2) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.B = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("b")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test3) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.C == nil {
				m.C = &Test1{}
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("c")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEncode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.D = append(m.D, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEncode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEncode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEncode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.D = append(m.D, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F = &v
		default:
			iNdEx = preIndex
			skippy, err := skipEncode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEncode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEncode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEncode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEncode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("encode.proto", fileDescriptor_encode_d34d9b25a65c94c4) }

var fileDescriptor_encode_d34d9b25a65c94c4 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcd, 0x4b, 0xce,
	0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x48, 0x0a, 0x4a, 0xcd, 0x49,
	0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0x32, 0x29, 0x4b, 0xcd, 0x4b, 0xc9, 0x2f, 0xd2, 0x4f, 0xcf, 0x2c,
	0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x4c,
	0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x82, 0x92, 0x10, 0x17, 0x6b, 0x48, 0x6a,
	0x71, 0x89, 0xa1, 0x10, 0x27, 0x17, 0x63, 0xa2, 0x04, 0xa3, 0x02, 0x93, 0x06, 0x2b, 0x4c, 0xcc,
	0x08, 0x24, 0x96, 0x24, 0xc1, 0xa4, 0xc0, 0xa4, 0xc1, 0xa9, 0xa4, 0x0a, 0x11, 0x33, 0x16, 0x92,
	0xe1, 0x62, 0x4c, 0x96, 0x60, 0x56, 0x60, 0xd2, 0xe0, 0x36, 0x12, 0xd4, 0x43, 0x58, 0xaf, 0x07,
	0x36, 0x45, 0x49, 0x0c, 0xa2, 0xcc, 0x44, 0x88, 0x97, 0x8b, 0x31, 0x45, 0x82, 0x45, 0x81, 0x59,
	0x83, 0xd5, 0x89, 0x49, 0x80, 0x11, 0x66, 0xa4, 0x29, 0xc8, 0xc8, 0x54, 0x09, 0x56, 0x05, 0x66,
	0x0d, 0x4e, 0x98, 0x98, 0x19, 0x48, 0x2c, 0x4d, 0x82, 0x4d, 0x81, 0x51, 0x83, 0xd5, 0x49, 0xe7,
	0xc6, 0x43, 0x39, 0x86, 0x07, 0x0f, 0xe5, 0x18, 0x3f, 0x3c, 0x94, 0x63, 0xfc, 0xf1, 0x50, 0x8e,
	0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x3b, 0x1e, 0xc9, 0x31, 0x1e, 0x78, 0x24,
	0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x02, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0xd5, 0x71, 0x6b, 0x0d, 0x01, 0x00, 0x00,
}
