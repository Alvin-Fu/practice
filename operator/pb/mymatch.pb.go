// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mymatch.proto

/*
	Package userinfosvr is a generated protocol buffer package.

	It is generated from these files:
		mymatch.proto

	It has these top-level messages:
		GetMatchinfoReq
		GetMatchinfoResp
		Header
		Matchinfo
		MatchFlag
		SignItem
*/
package mypb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 获取我的赛事服务名与方法名：matchinfo.GetUserMatch
type GetMatchinfoReq struct {
	Uid              int64    `protobuf:"varint,1,opt,name=uid" json:"uid"`
	MatchId          string   `protobuf:"bytes,2,opt,name=match_id,json=matchId" json:"match_id"`
	Header           *Header  `protobuf:"bytes,3,req,name=header" json:"header,omitempty"`
	Other            []string `protobuf:"bytes,4,rep,name=other" json:"other,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetMatchinfoReq) Reset()                    { *m = GetMatchinfoReq{} }
func (*GetMatchinfoReq) ProtoMessage()               {}
func (*GetMatchinfoReq) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{0} }

func (m *GetMatchinfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetMatchinfoReq) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *GetMatchinfoReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetMatchinfoReq) GetOther() []string {
	if m != nil {
		return m.Other
	}
	return nil
}

type GetMatchinfoResp struct {
	Errcode          int32        `protobuf:"varint,1,opt,name=errcode" json:"errcode"`
	Errmsg           string       `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg"`
	Data             []*Matchinfo `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetMatchinfoResp) Reset()                    { *m = GetMatchinfoResp{} }
func (*GetMatchinfoResp) ProtoMessage()               {}
func (*GetMatchinfoResp) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{1} }

func (m *GetMatchinfoResp) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *GetMatchinfoResp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetMatchinfoResp) GetData() []*Matchinfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// 头部公共参数
type Header struct {
	Product          *string `protobuf:"bytes,1,req,name=product" json:"product,omitempty"`
	Platform         *string `protobuf:"bytes,2,req,name=platform" json:"platform,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{2} }

func (m *Header) GetProduct() string {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return ""
}

func (m *Header) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *Header) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 比赛的信息
type Matchinfo struct {
	UserReward       bool      `protobuf:"varint,1,opt,name=user_reward,json=userReward" json:"user_reward"`
	MatchId          string    `protobuf:"bytes,2,opt,name=match_id,json=matchId" json:"match_id"`
	GameId           int32     `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id"`
	StartTime        int64     `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime          int64     `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time"`
	UserStatus       int32     `protobuf:"varint,6,opt,name=user_status,json=userStatus" json:"user_status"`
	MatchStatus      int32     `protobuf:"varint,7,opt,name=match_status,json=matchStatus" json:"match_status"`
	MatchName        string    `protobuf:"bytes,9,opt,name=match_name,json=matchName" json:"match_name"`
	MatchTag         string    `protobuf:"bytes,10,opt,name=match_tag,json=matchTag" json:"match_tag"`
	MatchFlag        MatchFlag `protobuf:"bytes,11,opt,name=match_flag,json=matchFlag" json:"match_flag"`
	SignNum          int32     `protobuf:"varint,12,opt,name=sign_num,json=signNum" json:"sign_num"`
	UserRank         int64     `protobuf:"varint,13,opt,name=user_rank,json=userRank" json:"user_rank"`
	GameStartTime    int64     `protobuf:"varint,14,opt,name=game_start_time,json=gameStartTime" json:"game_start_time"`
	DelayTime        *int64    `protobuf:"varint,15,opt,name=delay_time,json=delayTime" json:"delay_time,omitempty"`
	Sign             *SignItem `protobuf:"bytes,16,opt,name=sign" json:"sign,omitempty"`
	PicUrl           *string   `protobuf:"bytes,17,opt,name=pic_url,json=picUrl" json:"pic_url,omitempty"`
	MatchType        *int32    `protobuf:"varint,18,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	MatchEventType   *int32    `protobuf:"varint,19,opt,name=match_event_type,json=matchEventType" json:"match_event_type,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Matchinfo) Reset()                    { *m = Matchinfo{} }
func (*Matchinfo) ProtoMessage()               {}
func (*Matchinfo) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{3} }

func (m *Matchinfo) GetUserReward() bool {
	if m != nil {
		return m.UserReward
	}
	return false
}

func (m *Matchinfo) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Matchinfo) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *Matchinfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Matchinfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Matchinfo) GetUserStatus() int32 {
	if m != nil {
		return m.UserStatus
	}
	return 0
}

func (m *Matchinfo) GetMatchStatus() int32 {
	if m != nil {
		return m.MatchStatus
	}
	return 0
}

func (m *Matchinfo) GetMatchName() string {
	if m != nil {
		return m.MatchName
	}
	return ""
}

func (m *Matchinfo) GetMatchTag() string {
	if m != nil {
		return m.MatchTag
	}
	return ""
}

func (m *Matchinfo) GetMatchFlag() MatchFlag {
	if m != nil {
		return m.MatchFlag
	}
	return MatchFlag{}
}

func (m *Matchinfo) GetSignNum() int32 {
	if m != nil {
		return m.SignNum
	}
	return 0
}

func (m *Matchinfo) GetUserRank() int64 {
	if m != nil {
		return m.UserRank
	}
	return 0
}

func (m *Matchinfo) GetGameStartTime() int64 {
	if m != nil {
		return m.GameStartTime
	}
	return 0
}

func (m *Matchinfo) GetDelayTime() int64 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return 0
}

func (m *Matchinfo) GetSign() *SignItem {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Matchinfo) GetPicUrl() string {
	if m != nil && m.PicUrl != nil {
		return *m.PicUrl
	}
	return ""
}

func (m *Matchinfo) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

func (m *Matchinfo) GetMatchEventType() int32 {
	if m != nil && m.MatchEventType != nil {
		return *m.MatchEventType
	}
	return 0
}

// 比赛标识
type MatchFlag struct {
	RebuyFlag        *bool  `protobuf:"varint,1,opt,name=rebuy_flag,json=rebuyFlag" json:"rebuy_flag,omitempty"`
	ReentryFlag      *bool  `protobuf:"varint,2,opt,name=reentry_flag,json=reentryFlag" json:"reentry_flag,omitempty"`
	DelaySignFlag    *bool  `protobuf:"varint,3,opt,name=delay_sign_flag,json=delaySignFlag" json:"delay_sign_flag,omitempty"`
	AddonFlag        *bool  `protobuf:"varint,4,opt,name=addon_flag,json=addonFlag" json:"addon_flag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MatchFlag) Reset()                    { *m = MatchFlag{} }
func (*MatchFlag) ProtoMessage()               {}
func (*MatchFlag) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{4} }

func (m *MatchFlag) GetRebuyFlag() bool {
	if m != nil && m.RebuyFlag != nil {
		return *m.RebuyFlag
	}
	return false
}

func (m *MatchFlag) GetReentryFlag() bool {
	if m != nil && m.ReentryFlag != nil {
		return *m.ReentryFlag
	}
	return false
}

func (m *MatchFlag) GetDelaySignFlag() bool {
	if m != nil && m.DelaySignFlag != nil {
		return *m.DelaySignFlag
	}
	return false
}

func (m *MatchFlag) GetAddonFlag() bool {
	if m != nil && m.AddonFlag != nil {
		return *m.AddonFlag
	}
	return false
}

// 报名类型
type SignItem struct {
	SignType         *int32  `protobuf:"varint,1,opt,name=sign_type,json=signType" json:"sign_type,omitempty"`
	SignValue        *int64  `protobuf:"varint,2,opt,name=sign_value,json=signValue" json:"sign_value,omitempty"`
	SignIcon         *string `protobuf:"bytes,3,opt,name=sign_icon,json=signIcon" json:"sign_icon,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignItem) Reset()                    { *m = SignItem{} }
func (*SignItem) ProtoMessage()               {}
func (*SignItem) Descriptor() ([]byte, []int) { return fileDescriptorMymatch, []int{5} }

func (m *SignItem) GetSignType() int32 {
	if m != nil && m.SignType != nil {
		return *m.SignType
	}
	return 0
}

func (m *SignItem) GetSignValue() int64 {
	if m != nil && m.SignValue != nil {
		return *m.SignValue
	}
	return 0
}

func (m *SignItem) GetSignIcon() string {
	if m != nil && m.SignIcon != nil {
		return *m.SignIcon
	}
	return ""
}

func init() {
	proto.RegisterType((*GetMatchinfoReq)(nil), "userinfosvr.GetMatchinfoReq")
	proto.RegisterType((*GetMatchinfoResp)(nil), "userinfosvr.GetMatchinfoResp")
	proto.RegisterType((*Header)(nil), "userinfosvr.Header")
	proto.RegisterType((*Matchinfo)(nil), "userinfosvr.Matchinfo")
	proto.RegisterType((*MatchFlag)(nil), "userinfosvr.MatchFlag")
	proto.RegisterType((*SignItem)(nil), "userinfosvr.SignItem")
}
func (this *GetMatchinfoReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetMatchinfoReq)
	if !ok {
		that2, ok := that.(GetMatchinfoReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetMatchinfoReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetMatchinfoReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetMatchinfoReq but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if this.MatchId != that1.MatchId {
		return fmt.Errorf("MatchId this(%v) Not Equal that(%v)", this.MatchId, that1.MatchId)
	}
	if !this.Header.Equal(that1.Header) {
		return fmt.Errorf("Header this(%v) Not Equal that(%v)", this.Header, that1.Header)
	}
	if len(this.Other) != len(that1.Other) {
		return fmt.Errorf("Other this(%v) Not Equal that(%v)", len(this.Other), len(that1.Other))
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return fmt.Errorf("Other this[%v](%v) Not Equal that[%v](%v)", i, this.Other[i], i, that1.Other[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetMatchinfoReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMatchinfoReq)
	if !ok {
		that2, ok := that.(GetMatchinfoReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.MatchId != that1.MatchId {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Other) != len(that1.Other) {
		return false
	}
	for i := range this.Other {
		if this.Other[i] != that1.Other[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMatchinfoResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetMatchinfoResp)
	if !ok {
		that2, ok := that.(GetMatchinfoResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetMatchinfoResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetMatchinfoResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetMatchinfoResp but is not nil && this == nil")
	}
	if this.Errcode != that1.Errcode {
		return fmt.Errorf("Errcode this(%v) Not Equal that(%v)", this.Errcode, that1.Errcode)
	}
	if this.Errmsg != that1.Errmsg {
		return fmt.Errorf("Errmsg this(%v) Not Equal that(%v)", this.Errmsg, that1.Errmsg)
	}
	if len(this.Data) != len(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", len(this.Data), len(that1.Data))
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return fmt.Errorf("Data this[%v](%v) Not Equal that[%v](%v)", i, this.Data[i], i, that1.Data[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetMatchinfoResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMatchinfoResp)
	if !ok {
		that2, ok := that.(GetMatchinfoResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Errcode != that1.Errcode {
		return false
	}
	if this.Errmsg != that1.Errmsg {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Header) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Header")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Header but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Header but is not nil && this == nil")
	}
	if this.Product != nil && that1.Product != nil {
		if *this.Product != *that1.Product {
			return fmt.Errorf("Product this(%v) Not Equal that(%v)", *this.Product, *that1.Product)
		}
	} else if this.Product != nil {
		return fmt.Errorf("this.Product == nil && that.Product != nil")
	} else if that1.Product != nil {
		return fmt.Errorf("Product this(%v) Not Equal that(%v)", this.Product, that1.Product)
	}
	if this.Platform != nil && that1.Platform != nil {
		if *this.Platform != *that1.Platform {
			return fmt.Errorf("Platform this(%v) Not Equal that(%v)", *this.Platform, *that1.Platform)
		}
	} else if this.Platform != nil {
		return fmt.Errorf("this.Platform == nil && that.Platform != nil")
	} else if that1.Platform != nil {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if this.Time != nil && that1.Time != nil {
		if *this.Time != *that1.Time {
			return fmt.Errorf("Time this(%v) Not Equal that(%v)", *this.Time, *that1.Time)
		}
	} else if this.Time != nil {
		return fmt.Errorf("this.Time == nil && that.Time != nil")
	} else if that1.Time != nil {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Product != nil && that1.Product != nil {
		if *this.Product != *that1.Product {
			return false
		}
	} else if this.Product != nil {
		return false
	} else if that1.Product != nil {
		return false
	}
	if this.Platform != nil && that1.Platform != nil {
		if *this.Platform != *that1.Platform {
			return false
		}
	} else if this.Platform != nil {
		return false
	} else if that1.Platform != nil {
		return false
	}
	if this.Time != nil && that1.Time != nil {
		if *this.Time != *that1.Time {
			return false
		}
	} else if this.Time != nil {
		return false
	} else if that1.Time != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Matchinfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Matchinfo)
	if !ok {
		that2, ok := that.(Matchinfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Matchinfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Matchinfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Matchinfo but is not nil && this == nil")
	}
	if this.UserReward != that1.UserReward {
		return fmt.Errorf("UserReward this(%v) Not Equal that(%v)", this.UserReward, that1.UserReward)
	}
	if this.MatchId != that1.MatchId {
		return fmt.Errorf("MatchId this(%v) Not Equal that(%v)", this.MatchId, that1.MatchId)
	}
	if this.GameId != that1.GameId {
		return fmt.Errorf("GameId this(%v) Not Equal that(%v)", this.GameId, that1.GameId)
	}
	if this.StartTime != that1.StartTime {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if this.EndTime != that1.EndTime {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if this.UserStatus != that1.UserStatus {
		return fmt.Errorf("UserStatus this(%v) Not Equal that(%v)", this.UserStatus, that1.UserStatus)
	}
	if this.MatchStatus != that1.MatchStatus {
		return fmt.Errorf("MatchStatus this(%v) Not Equal that(%v)", this.MatchStatus, that1.MatchStatus)
	}
	if this.MatchName != that1.MatchName {
		return fmt.Errorf("MatchName this(%v) Not Equal that(%v)", this.MatchName, that1.MatchName)
	}
	if this.MatchTag != that1.MatchTag {
		return fmt.Errorf("MatchTag this(%v) Not Equal that(%v)", this.MatchTag, that1.MatchTag)
	}
	if !this.MatchFlag.Equal(&that1.MatchFlag) {
		return fmt.Errorf("MatchFlag this(%v) Not Equal that(%v)", this.MatchFlag, that1.MatchFlag)
	}
	if this.SignNum != that1.SignNum {
		return fmt.Errorf("SignNum this(%v) Not Equal that(%v)", this.SignNum, that1.SignNum)
	}
	if this.UserRank != that1.UserRank {
		return fmt.Errorf("UserRank this(%v) Not Equal that(%v)", this.UserRank, that1.UserRank)
	}
	if this.GameStartTime != that1.GameStartTime {
		return fmt.Errorf("GameStartTime this(%v) Not Equal that(%v)", this.GameStartTime, that1.GameStartTime)
	}
	if this.DelayTime != nil && that1.DelayTime != nil {
		if *this.DelayTime != *that1.DelayTime {
			return fmt.Errorf("DelayTime this(%v) Not Equal that(%v)", *this.DelayTime, *that1.DelayTime)
		}
	} else if this.DelayTime != nil {
		return fmt.Errorf("this.DelayTime == nil && that.DelayTime != nil")
	} else if that1.DelayTime != nil {
		return fmt.Errorf("DelayTime this(%v) Not Equal that(%v)", this.DelayTime, that1.DelayTime)
	}
	if !this.Sign.Equal(that1.Sign) {
		return fmt.Errorf("Sign this(%v) Not Equal that(%v)", this.Sign, that1.Sign)
	}
	if this.PicUrl != nil && that1.PicUrl != nil {
		if *this.PicUrl != *that1.PicUrl {
			return fmt.Errorf("PicUrl this(%v) Not Equal that(%v)", *this.PicUrl, *that1.PicUrl)
		}
	} else if this.PicUrl != nil {
		return fmt.Errorf("this.PicUrl == nil && that.PicUrl != nil")
	} else if that1.PicUrl != nil {
		return fmt.Errorf("PicUrl this(%v) Not Equal that(%v)", this.PicUrl, that1.PicUrl)
	}
	if this.MatchType != nil && that1.MatchType != nil {
		if *this.MatchType != *that1.MatchType {
			return fmt.Errorf("MatchType this(%v) Not Equal that(%v)", *this.MatchType, *that1.MatchType)
		}
	} else if this.MatchType != nil {
		return fmt.Errorf("this.MatchType == nil && that.MatchType != nil")
	} else if that1.MatchType != nil {
		return fmt.Errorf("MatchType this(%v) Not Equal that(%v)", this.MatchType, that1.MatchType)
	}
	if this.MatchEventType != nil && that1.MatchEventType != nil {
		if *this.MatchEventType != *that1.MatchEventType {
			return fmt.Errorf("MatchEventType this(%v) Not Equal that(%v)", *this.MatchEventType, *that1.MatchEventType)
		}
	} else if this.MatchEventType != nil {
		return fmt.Errorf("this.MatchEventType == nil && that.MatchEventType != nil")
	} else if that1.MatchEventType != nil {
		return fmt.Errorf("MatchEventType this(%v) Not Equal that(%v)", this.MatchEventType, that1.MatchEventType)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Matchinfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Matchinfo)
	if !ok {
		that2, ok := that.(Matchinfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserReward != that1.UserReward {
		return false
	}
	if this.MatchId != that1.MatchId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.UserStatus != that1.UserStatus {
		return false
	}
	if this.MatchStatus != that1.MatchStatus {
		return false
	}
	if this.MatchName != that1.MatchName {
		return false
	}
	if this.MatchTag != that1.MatchTag {
		return false
	}
	if !this.MatchFlag.Equal(&that1.MatchFlag) {
		return false
	}
	if this.SignNum != that1.SignNum {
		return false
	}
	if this.UserRank != that1.UserRank {
		return false
	}
	if this.GameStartTime != that1.GameStartTime {
		return false
	}
	if this.DelayTime != nil && that1.DelayTime != nil {
		if *this.DelayTime != *that1.DelayTime {
			return false
		}
	} else if this.DelayTime != nil {
		return false
	} else if that1.DelayTime != nil {
		return false
	}
	if !this.Sign.Equal(that1.Sign) {
		return false
	}
	if this.PicUrl != nil && that1.PicUrl != nil {
		if *this.PicUrl != *that1.PicUrl {
			return false
		}
	} else if this.PicUrl != nil {
		return false
	} else if that1.PicUrl != nil {
		return false
	}
	if this.MatchType != nil && that1.MatchType != nil {
		if *this.MatchType != *that1.MatchType {
			return false
		}
	} else if this.MatchType != nil {
		return false
	} else if that1.MatchType != nil {
		return false
	}
	if this.MatchEventType != nil && that1.MatchEventType != nil {
		if *this.MatchEventType != *that1.MatchEventType {
			return false
		}
	} else if this.MatchEventType != nil {
		return false
	} else if that1.MatchEventType != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MatchFlag) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MatchFlag)
	if !ok {
		that2, ok := that.(MatchFlag)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MatchFlag")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MatchFlag but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MatchFlag but is not nil && this == nil")
	}
	if this.RebuyFlag != nil && that1.RebuyFlag != nil {
		if *this.RebuyFlag != *that1.RebuyFlag {
			return fmt.Errorf("RebuyFlag this(%v) Not Equal that(%v)", *this.RebuyFlag, *that1.RebuyFlag)
		}
	} else if this.RebuyFlag != nil {
		return fmt.Errorf("this.RebuyFlag == nil && that.RebuyFlag != nil")
	} else if that1.RebuyFlag != nil {
		return fmt.Errorf("RebuyFlag this(%v) Not Equal that(%v)", this.RebuyFlag, that1.RebuyFlag)
	}
	if this.ReentryFlag != nil && that1.ReentryFlag != nil {
		if *this.ReentryFlag != *that1.ReentryFlag {
			return fmt.Errorf("ReentryFlag this(%v) Not Equal that(%v)", *this.ReentryFlag, *that1.ReentryFlag)
		}
	} else if this.ReentryFlag != nil {
		return fmt.Errorf("this.ReentryFlag == nil && that.ReentryFlag != nil")
	} else if that1.ReentryFlag != nil {
		return fmt.Errorf("ReentryFlag this(%v) Not Equal that(%v)", this.ReentryFlag, that1.ReentryFlag)
	}
	if this.DelaySignFlag != nil && that1.DelaySignFlag != nil {
		if *this.DelaySignFlag != *that1.DelaySignFlag {
			return fmt.Errorf("DelaySignFlag this(%v) Not Equal that(%v)", *this.DelaySignFlag, *that1.DelaySignFlag)
		}
	} else if this.DelaySignFlag != nil {
		return fmt.Errorf("this.DelaySignFlag == nil && that.DelaySignFlag != nil")
	} else if that1.DelaySignFlag != nil {
		return fmt.Errorf("DelaySignFlag this(%v) Not Equal that(%v)", this.DelaySignFlag, that1.DelaySignFlag)
	}
	if this.AddonFlag != nil && that1.AddonFlag != nil {
		if *this.AddonFlag != *that1.AddonFlag {
			return fmt.Errorf("AddonFlag this(%v) Not Equal that(%v)", *this.AddonFlag, *that1.AddonFlag)
		}
	} else if this.AddonFlag != nil {
		return fmt.Errorf("this.AddonFlag == nil && that.AddonFlag != nil")
	} else if that1.AddonFlag != nil {
		return fmt.Errorf("AddonFlag this(%v) Not Equal that(%v)", this.AddonFlag, that1.AddonFlag)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MatchFlag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchFlag)
	if !ok {
		that2, ok := that.(MatchFlag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RebuyFlag != nil && that1.RebuyFlag != nil {
		if *this.RebuyFlag != *that1.RebuyFlag {
			return false
		}
	} else if this.RebuyFlag != nil {
		return false
	} else if that1.RebuyFlag != nil {
		return false
	}
	if this.ReentryFlag != nil && that1.ReentryFlag != nil {
		if *this.ReentryFlag != *that1.ReentryFlag {
			return false
		}
	} else if this.ReentryFlag != nil {
		return false
	} else if that1.ReentryFlag != nil {
		return false
	}
	if this.DelaySignFlag != nil && that1.DelaySignFlag != nil {
		if *this.DelaySignFlag != *that1.DelaySignFlag {
			return false
		}
	} else if this.DelaySignFlag != nil {
		return false
	} else if that1.DelaySignFlag != nil {
		return false
	}
	if this.AddonFlag != nil && that1.AddonFlag != nil {
		if *this.AddonFlag != *that1.AddonFlag {
			return false
		}
	} else if this.AddonFlag != nil {
		return false
	} else if that1.AddonFlag != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SignItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SignItem)
	if !ok {
		that2, ok := that.(SignItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SignItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SignItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SignItem but is not nil && this == nil")
	}
	if this.SignType != nil && that1.SignType != nil {
		if *this.SignType != *that1.SignType {
			return fmt.Errorf("SignType this(%v) Not Equal that(%v)", *this.SignType, *that1.SignType)
		}
	} else if this.SignType != nil {
		return fmt.Errorf("this.SignType == nil && that.SignType != nil")
	} else if that1.SignType != nil {
		return fmt.Errorf("SignType this(%v) Not Equal that(%v)", this.SignType, that1.SignType)
	}
	if this.SignValue != nil && that1.SignValue != nil {
		if *this.SignValue != *that1.SignValue {
			return fmt.Errorf("SignValue this(%v) Not Equal that(%v)", *this.SignValue, *that1.SignValue)
		}
	} else if this.SignValue != nil {
		return fmt.Errorf("this.SignValue == nil && that.SignValue != nil")
	} else if that1.SignValue != nil {
		return fmt.Errorf("SignValue this(%v) Not Equal that(%v)", this.SignValue, that1.SignValue)
	}
	if this.SignIcon != nil && that1.SignIcon != nil {
		if *this.SignIcon != *that1.SignIcon {
			return fmt.Errorf("SignIcon this(%v) Not Equal that(%v)", *this.SignIcon, *that1.SignIcon)
		}
	} else if this.SignIcon != nil {
		return fmt.Errorf("this.SignIcon == nil && that.SignIcon != nil")
	} else if that1.SignIcon != nil {
		return fmt.Errorf("SignIcon this(%v) Not Equal that(%v)", this.SignIcon, that1.SignIcon)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SignItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignItem)
	if !ok {
		that2, ok := that.(SignItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignType != nil && that1.SignType != nil {
		if *this.SignType != *that1.SignType {
			return false
		}
	} else if this.SignType != nil {
		return false
	} else if that1.SignType != nil {
		return false
	}
	if this.SignValue != nil && that1.SignValue != nil {
		if *this.SignValue != *that1.SignValue {
			return false
		}
	} else if this.SignValue != nil {
		return false
	} else if that1.SignValue != nil {
		return false
	}
	if this.SignIcon != nil && that1.SignIcon != nil {
		if *this.SignIcon != *that1.SignIcon {
			return false
		}
	} else if this.SignIcon != nil {
		return false
	} else if that1.SignIcon != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetMatchinfoReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&userinfosvr.GetMatchinfoReq{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "MatchId: "+fmt.Sprintf("%#v", this.MatchId)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Other != nil {
		s = append(s, "Other: "+fmt.Sprintf("%#v", this.Other)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMatchinfoResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&userinfosvr.GetMatchinfoResp{")
	s = append(s, "Errcode: "+fmt.Sprintf("%#v", this.Errcode)+",\n")
	s = append(s, "Errmsg: "+fmt.Sprintf("%#v", this.Errmsg)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&userinfosvr.Header{")
	if this.Product != nil {
		s = append(s, "Product: "+valueToGoStringMymatch(this.Product, "string")+",\n")
	}
	if this.Platform != nil {
		s = append(s, "Platform: "+valueToGoStringMymatch(this.Platform, "string")+",\n")
	}
	if this.Time != nil {
		s = append(s, "Time: "+valueToGoStringMymatch(this.Time, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Matchinfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&userinfosvr.Matchinfo{")
	s = append(s, "UserReward: "+fmt.Sprintf("%#v", this.UserReward)+",\n")
	s = append(s, "MatchId: "+fmt.Sprintf("%#v", this.MatchId)+",\n")
	s = append(s, "GameId: "+fmt.Sprintf("%#v", this.GameId)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "UserStatus: "+fmt.Sprintf("%#v", this.UserStatus)+",\n")
	s = append(s, "MatchStatus: "+fmt.Sprintf("%#v", this.MatchStatus)+",\n")
	s = append(s, "MatchName: "+fmt.Sprintf("%#v", this.MatchName)+",\n")
	s = append(s, "MatchTag: "+fmt.Sprintf("%#v", this.MatchTag)+",\n")
	s = append(s, "MatchFlag: "+strings.Replace(this.MatchFlag.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "SignNum: "+fmt.Sprintf("%#v", this.SignNum)+",\n")
	s = append(s, "UserRank: "+fmt.Sprintf("%#v", this.UserRank)+",\n")
	s = append(s, "GameStartTime: "+fmt.Sprintf("%#v", this.GameStartTime)+",\n")
	if this.DelayTime != nil {
		s = append(s, "DelayTime: "+valueToGoStringMymatch(this.DelayTime, "int64")+",\n")
	}
	if this.Sign != nil {
		s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	}
	if this.PicUrl != nil {
		s = append(s, "PicUrl: "+valueToGoStringMymatch(this.PicUrl, "string")+",\n")
	}
	if this.MatchType != nil {
		s = append(s, "MatchType: "+valueToGoStringMymatch(this.MatchType, "int32")+",\n")
	}
	if this.MatchEventType != nil {
		s = append(s, "MatchEventType: "+valueToGoStringMymatch(this.MatchEventType, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchFlag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&userinfosvr.MatchFlag{")
	if this.RebuyFlag != nil {
		s = append(s, "RebuyFlag: "+valueToGoStringMymatch(this.RebuyFlag, "bool")+",\n")
	}
	if this.ReentryFlag != nil {
		s = append(s, "ReentryFlag: "+valueToGoStringMymatch(this.ReentryFlag, "bool")+",\n")
	}
	if this.DelaySignFlag != nil {
		s = append(s, "DelaySignFlag: "+valueToGoStringMymatch(this.DelaySignFlag, "bool")+",\n")
	}
	if this.AddonFlag != nil {
		s = append(s, "AddonFlag: "+valueToGoStringMymatch(this.AddonFlag, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&userinfosvr.SignItem{")
	if this.SignType != nil {
		s = append(s, "SignType: "+valueToGoStringMymatch(this.SignType, "int32")+",\n")
	}
	if this.SignValue != nil {
		s = append(s, "SignValue: "+valueToGoStringMymatch(this.SignValue, "int64")+",\n")
	}
	if this.SignIcon != nil {
		s = append(s, "SignIcon: "+valueToGoStringMymatch(this.SignIcon, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMymatch(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetMatchinfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMatchinfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(len(m.MatchId)))
	i += copy(dAtA[i:], m.MatchId)
	if m.Header == nil {
		return 0, proto.NewRequiredNotSetError("header")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMatchinfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMatchinfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.Errcode))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(len(m.Errmsg)))
	i += copy(dAtA[i:], m.Errmsg)
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMymatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Product == nil {
		return 0, proto.NewRequiredNotSetError("product")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(len(*m.Product)))
		i += copy(dAtA[i:], *m.Product)
	}
	if m.Platform == nil {
		return 0, proto.NewRequiredNotSetError("platform")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(len(*m.Platform)))
		i += copy(dAtA[i:], *m.Platform)
	}
	if m.Time == nil {
		return 0, proto.NewRequiredNotSetError("time")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Matchinfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Matchinfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.UserReward {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x12
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(len(m.MatchId)))
	i += copy(dAtA[i:], m.MatchId)
	dAtA[i] = 0x18
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.GameId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.StartTime))
	dAtA[i] = 0x28
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.EndTime))
	dAtA[i] = 0x30
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.UserStatus))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.MatchStatus))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(len(m.MatchName)))
	i += copy(dAtA[i:], m.MatchName)
	dAtA[i] = 0x52
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(len(m.MatchTag)))
	i += copy(dAtA[i:], m.MatchTag)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.MatchFlag.Size()))
	n2, err := m.MatchFlag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x60
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.SignNum))
	dAtA[i] = 0x68
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.UserRank))
	dAtA[i] = 0x70
	i++
	i = encodeVarintMymatch(dAtA, i, uint64(m.GameStartTime))
	if m.DelayTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.DelayTime))
	}
	if m.Sign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(m.Sign.Size()))
		n3, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.PicUrl != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(len(*m.PicUrl)))
		i += copy(dAtA[i:], *m.PicUrl)
	}
	if m.MatchType != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.MatchType))
	}
	if m.MatchEventType != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.MatchEventType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RebuyFlag != nil {
		dAtA[i] = 0x8
		i++
		if *m.RebuyFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReentryFlag != nil {
		dAtA[i] = 0x10
		i++
		if *m.ReentryFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DelaySignFlag != nil {
		dAtA[i] = 0x18
		i++
		if *m.DelaySignFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddonFlag != nil {
		dAtA[i] = 0x20
		i++
		if *m.AddonFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.SignType))
	}
	if m.SignValue != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(*m.SignValue))
	}
	if m.SignIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMymatch(dAtA, i, uint64(len(*m.SignIcon)))
		i += copy(dAtA[i:], *m.SignIcon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMymatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetMatchinfoReq(r randyMymatch, easy bool) *GetMatchinfoReq {
	this := &GetMatchinfoReq{}
	this.Uid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	this.MatchId = string(randStringMymatch(r))
	this.Header = NewPopulatedHeader(r, easy)
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Other = make([]string, v1)
		for i := 0; i < v1; i++ {
			this.Other[i] = string(randStringMymatch(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 5)
	}
	return this
}

func NewPopulatedGetMatchinfoResp(r randyMymatch, easy bool) *GetMatchinfoResp {
	this := &GetMatchinfoResp{}
	this.Errcode = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Errcode *= -1
	}
	this.Errmsg = string(randStringMymatch(r))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Data = make([]*Matchinfo, v2)
		for i := 0; i < v2; i++ {
			this.Data[i] = NewPopulatedMatchinfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 4)
	}
	return this
}

func NewPopulatedHeader(r randyMymatch, easy bool) *Header {
	this := &Header{}
	v3 := string(randStringMymatch(r))
	this.Product = &v3
	v4 := string(randStringMymatch(r))
	this.Platform = &v4
	v5 := int64(r.Int63())
	if r.Intn(2) == 0 {
		v5 *= -1
	}
	this.Time = &v5
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 4)
	}
	return this
}

func NewPopulatedMatchinfo(r randyMymatch, easy bool) *Matchinfo {
	this := &Matchinfo{}
	this.UserReward = bool(bool(r.Intn(2) == 0))
	this.MatchId = string(randStringMymatch(r))
	this.GameId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.GameId *= -1
	}
	this.StartTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StartTime *= -1
	}
	this.EndTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.EndTime *= -1
	}
	this.UserStatus = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UserStatus *= -1
	}
	this.MatchStatus = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MatchStatus *= -1
	}
	this.MatchName = string(randStringMymatch(r))
	this.MatchTag = string(randStringMymatch(r))
	v6 := NewPopulatedMatchFlag(r, easy)
	this.MatchFlag = *v6
	this.SignNum = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SignNum *= -1
	}
	this.UserRank = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserRank *= -1
	}
	this.GameStartTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GameStartTime *= -1
	}
	if r.Intn(10) != 0 {
		v7 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.DelayTime = &v7
	}
	if r.Intn(10) != 0 {
		this.Sign = NewPopulatedSignItem(r, easy)
	}
	if r.Intn(10) != 0 {
		v8 := string(randStringMymatch(r))
		this.PicUrl = &v8
	}
	if r.Intn(10) != 0 {
		v9 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.MatchType = &v9
	}
	if r.Intn(10) != 0 {
		v10 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.MatchEventType = &v10
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 20)
	}
	return this
}

func NewPopulatedMatchFlag(r randyMymatch, easy bool) *MatchFlag {
	this := &MatchFlag{}
	if r.Intn(10) != 0 {
		v11 := bool(bool(r.Intn(2) == 0))
		this.RebuyFlag = &v11
	}
	if r.Intn(10) != 0 {
		v12 := bool(bool(r.Intn(2) == 0))
		this.ReentryFlag = &v12
	}
	if r.Intn(10) != 0 {
		v13 := bool(bool(r.Intn(2) == 0))
		this.DelaySignFlag = &v13
	}
	if r.Intn(10) != 0 {
		v14 := bool(bool(r.Intn(2) == 0))
		this.AddonFlag = &v14
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 5)
	}
	return this
}

func NewPopulatedSignItem(r randyMymatch, easy bool) *SignItem {
	this := &SignItem{}
	if r.Intn(10) != 0 {
		v15 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.SignType = &v15
	}
	if r.Intn(10) != 0 {
		v16 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.SignValue = &v16
	}
	if r.Intn(10) != 0 {
		v17 := string(randStringMymatch(r))
		this.SignIcon = &v17
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMymatch(r, 4)
	}
	return this
}

type randyMymatch interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMymatch(r randyMymatch) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMymatch(r randyMymatch) string {
	v18 := r.Intn(100)
	tmps := make([]rune, v18)
	for i := 0; i < v18; i++ {
		tmps[i] = randUTF8RuneMymatch(r)
	}
	return string(tmps)
}
func randUnrecognizedMymatch(r randyMymatch, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMymatch(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMymatch(dAtA []byte, r randyMymatch, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(key))
		v19 := r.Int63()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(v19))
	case 1:
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMymatch(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMymatch(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetMatchinfoReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMymatch(uint64(m.Uid))
	l = len(m.MatchId)
	n += 1 + l + sovMymatch(uint64(l))
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMymatch(uint64(l))
	}
	if len(m.Other) > 0 {
		for _, s := range m.Other {
			l = len(s)
			n += 1 + l + sovMymatch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMatchinfoResp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMymatch(uint64(m.Errcode))
	l = len(m.Errmsg)
	n += 1 + l + sovMymatch(uint64(l))
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovMymatch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.Product != nil {
		l = len(*m.Product)
		n += 1 + l + sovMymatch(uint64(l))
	}
	if m.Platform != nil {
		l = len(*m.Platform)
		n += 1 + l + sovMymatch(uint64(l))
	}
	if m.Time != nil {
		n += 1 + sovMymatch(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Matchinfo) Size() (n int) {
	var l int
	_ = l
	n += 2
	l = len(m.MatchId)
	n += 1 + l + sovMymatch(uint64(l))
	n += 1 + sovMymatch(uint64(m.GameId))
	n += 1 + sovMymatch(uint64(m.StartTime))
	n += 1 + sovMymatch(uint64(m.EndTime))
	n += 1 + sovMymatch(uint64(m.UserStatus))
	n += 1 + sovMymatch(uint64(m.MatchStatus))
	l = len(m.MatchName)
	n += 1 + l + sovMymatch(uint64(l))
	l = len(m.MatchTag)
	n += 1 + l + sovMymatch(uint64(l))
	l = m.MatchFlag.Size()
	n += 1 + l + sovMymatch(uint64(l))
	n += 1 + sovMymatch(uint64(m.SignNum))
	n += 1 + sovMymatch(uint64(m.UserRank))
	n += 1 + sovMymatch(uint64(m.GameStartTime))
	if m.DelayTime != nil {
		n += 1 + sovMymatch(uint64(*m.DelayTime))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 2 + l + sovMymatch(uint64(l))
	}
	if m.PicUrl != nil {
		l = len(*m.PicUrl)
		n += 2 + l + sovMymatch(uint64(l))
	}
	if m.MatchType != nil {
		n += 2 + sovMymatch(uint64(*m.MatchType))
	}
	if m.MatchEventType != nil {
		n += 2 + sovMymatch(uint64(*m.MatchEventType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchFlag) Size() (n int) {
	var l int
	_ = l
	if m.RebuyFlag != nil {
		n += 2
	}
	if m.ReentryFlag != nil {
		n += 2
	}
	if m.DelaySignFlag != nil {
		n += 2
	}
	if m.AddonFlag != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignItem) Size() (n int) {
	var l int
	_ = l
	if m.SignType != nil {
		n += 1 + sovMymatch(uint64(*m.SignType))
	}
	if m.SignValue != nil {
		n += 1 + sovMymatch(uint64(*m.SignValue))
	}
	if m.SignIcon != nil {
		l = len(*m.SignIcon)
		n += 1 + l + sovMymatch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMymatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMymatch(x uint64) (n int) {
	return sovMymatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetMatchinfoReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMatchinfoReq{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`MatchId:` + fmt.Sprintf("%v", this.MatchId) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "Header", 1) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMatchinfoResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMatchinfoResp{`,
		`Errcode:` + fmt.Sprintf("%v", this.Errcode) + `,`,
		`Errmsg:` + fmt.Sprintf("%v", this.Errmsg) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Matchinfo", "Matchinfo", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Header{`,
		`Product:` + valueToStringMymatch(this.Product) + `,`,
		`Platform:` + valueToStringMymatch(this.Platform) + `,`,
		`Time:` + valueToStringMymatch(this.Time) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Matchinfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Matchinfo{`,
		`UserReward:` + fmt.Sprintf("%v", this.UserReward) + `,`,
		`MatchId:` + fmt.Sprintf("%v", this.MatchId) + `,`,
		`GameId:` + fmt.Sprintf("%v", this.GameId) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`UserStatus:` + fmt.Sprintf("%v", this.UserStatus) + `,`,
		`MatchStatus:` + fmt.Sprintf("%v", this.MatchStatus) + `,`,
		`MatchName:` + fmt.Sprintf("%v", this.MatchName) + `,`,
		`MatchTag:` + fmt.Sprintf("%v", this.MatchTag) + `,`,
		`MatchFlag:` + strings.Replace(strings.Replace(this.MatchFlag.String(), "MatchFlag", "MatchFlag", 1), `&`, ``, 1) + `,`,
		`SignNum:` + fmt.Sprintf("%v", this.SignNum) + `,`,
		`UserRank:` + fmt.Sprintf("%v", this.UserRank) + `,`,
		`GameStartTime:` + fmt.Sprintf("%v", this.GameStartTime) + `,`,
		`DelayTime:` + valueToStringMymatch(this.DelayTime) + `,`,
		`Sign:` + strings.Replace(fmt.Sprintf("%v", this.Sign), "SignItem", "SignItem", 1) + `,`,
		`PicUrl:` + valueToStringMymatch(this.PicUrl) + `,`,
		`MatchType:` + valueToStringMymatch(this.MatchType) + `,`,
		`MatchEventType:` + valueToStringMymatch(this.MatchEventType) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchFlag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchFlag{`,
		`RebuyFlag:` + valueToStringMymatch(this.RebuyFlag) + `,`,
		`ReentryFlag:` + valueToStringMymatch(this.ReentryFlag) + `,`,
		`DelaySignFlag:` + valueToStringMymatch(this.DelaySignFlag) + `,`,
		`AddonFlag:` + valueToStringMymatch(this.AddonFlag) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignItem{`,
		`SignType:` + valueToStringMymatch(this.SignType) + `,`,
		`SignValue:` + valueToStringMymatch(this.SignValue) + `,`,
		`SignIcon:` + valueToStringMymatch(this.SignIcon) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMymatch(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetMatchinfoReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMatchinfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMatchinfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = append(m.Other, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("header")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMatchinfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMatchinfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMatchinfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			m.Errcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errmsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errmsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Matchinfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Product = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Platform = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("product")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("platform")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Matchinfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Matchinfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Matchinfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserReward = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			m.UserStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStatus", wireType)
			}
			m.MatchStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MatchFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignNum", wireType)
			}
			m.SignNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRank", wireType)
			}
			m.UserRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStartTime", wireType)
			}
			m.GameStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayTime = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &SignItem{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PicUrl = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchType = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEventType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchEventType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuyFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RebuyFlag = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReentryFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReentryFlag = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelaySignFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DelaySignFlag = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AddonFlag = &b
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignValue = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMymatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SignIcon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMymatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMymatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMymatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMymatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMymatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMymatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMymatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMymatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMymatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMymatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mymatch.proto", fileDescriptorMymatch) }

var fileDescriptorMymatch = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xbf, 0x6e, 0x1b, 0x47,
	0x10, 0xc6, 0xb5, 0x3c, 0xfe, 0xbb, 0xa1, 0x28, 0x2a, 0xab, 0x44, 0x59, 0x28, 0xe1, 0x89, 0xa2,
	0x90, 0x84, 0x49, 0x14, 0x0a, 0x50, 0x9b, 0x4e, 0x40, 0x62, 0xb3, 0xb0, 0x8a, 0x93, 0xec, 0x96,
	0x58, 0xdd, 0x2d, 0x8f, 0x07, 0xf1, 0xfe, 0x78, 0x6f, 0x4f, 0x06, 0x01, 0x17, 0x7e, 0x01, 0x77,
	0x7e, 0x08, 0x03, 0x7e, 0x01, 0x97, 0x2e, 0x55, 0xba, 0x74, 0x65, 0x88, 0x7c, 0x02, 0x97, 0x2e,
	0x8d, 0x9d, 0x3d, 0xd2, 0x47, 0xc0, 0x80, 0x3b, 0xee, 0x37, 0xbf, 0xdb, 0xf9, 0xe6, 0x9b, 0x05,
	0xa1, 0x1d, 0xcd, 0x23, 0xae, 0xbc, 0xe9, 0x30, 0x95, 0x89, 0x4a, 0x68, 0x2b, 0xcf, 0x84, 0x0c,
	0xe3, 0x49, 0x92, 0xdd, 0xca, 0x83, 0x7f, 0x82, 0x50, 0x4d, 0xf3, 0xeb, 0xa1, 0x97, 0x44, 0xa7,
	0x41, 0x12, 0x24, 0xa7, 0xc8, 0x5c, 0xe7, 0x13, 0x3c, 0xe1, 0x01, 0x7f, 0x99, 0x6f, 0xfb, 0x2f,
	0x09, 0x74, 0x1e, 0x08, 0xf5, 0x48, 0x5f, 0xa7, 0xaf, 0x70, 0xc5, 0x53, 0xba, 0x0f, 0x56, 0x1e,
	0xfa, 0x8c, 0xf4, 0xc8, 0xc0, 0x3a, 0xaf, 0xde, 0x7d, 0x3c, 0xdc, 0x72, 0xb5, 0x40, 0x0f, 0xa1,
	0x89, 0x6d, 0xc7, 0xa1, 0xcf, 0x2a, 0x3d, 0x32, 0xb0, 0x8b, 0x62, 0x03, 0xd5, 0x91, 0x4f, 0xff,
	0x86, 0xfa, 0x54, 0x70, 0x5f, 0x48, 0x66, 0xf5, 0x2a, 0x83, 0xd6, 0xd9, 0xde, 0xb0, 0xe4, 0x6c,
	0xf8, 0x10, 0x4b, 0x6e, 0x81, 0xd0, 0x1f, 0xa1, 0x96, 0xa8, 0xa9, 0x90, 0xac, 0xda, 0xb3, 0x06,
	0xb6, 0x6b, 0x0e, 0xfd, 0xe7, 0xb0, 0xbb, 0x69, 0x27, 0x4b, 0xa9, 0x03, 0x0d, 0x21, 0xa5, 0x97,
	0xf8, 0x02, 0x3d, 0xd5, 0x56, 0x6d, 0x0b, 0x91, 0xfe, 0x0a, 0x75, 0x21, 0x65, 0x94, 0x05, 0x1b,
	0xae, 0x0a, 0x8d, 0xfe, 0x05, 0x55, 0x9f, 0x2b, 0xce, 0xac, 0x9e, 0x35, 0x68, 0x9d, 0xed, 0x6f,
	0x58, 0xfa, 0xda, 0x07, 0x99, 0xbe, 0x0b, 0x75, 0xe3, 0x92, 0x32, 0x68, 0xa4, 0x32, 0xf1, 0x73,
	0x4f, 0x31, 0xd2, 0xab, 0x0c, 0x6c, 0x77, 0x75, 0xa4, 0x07, 0xd0, 0x4c, 0x67, 0x5c, 0x4d, 0x12,
	0x19, 0xb1, 0x0a, 0x96, 0xd6, 0x67, 0x4a, 0xa1, 0xaa, 0xc2, 0x48, 0xe0, 0xf8, 0x96, 0x8b, 0xbf,
	0xfb, 0x6f, 0x6a, 0x60, 0xaf, 0xfb, 0xd0, 0xdf, 0x00, 0xb7, 0x35, 0x96, 0xe2, 0x19, 0x97, 0x26,
	0xe3, 0x66, 0x61, 0x18, 0x74, 0xc1, 0x45, 0xfd, 0xfb, 0x51, 0x77, 0xa1, 0x11, 0xf0, 0x48, 0xe8,
	0xba, 0x55, 0xca, 0xa4, 0xae, 0xc5, 0x91, 0x4f, 0x8f, 0x01, 0x32, 0xc5, 0xa5, 0x1a, 0xa3, 0x9d,
	0x6a, 0x69, 0x93, 0x36, 0xea, 0x57, 0x61, 0x24, 0x74, 0x13, 0x11, 0xfb, 0x06, 0xa9, 0x95, 0x90,
	0x86, 0x88, 0x7d, 0x04, 0x56, 0x66, 0x33, 0xc5, 0x55, 0x9e, 0xb1, 0x7a, 0xa9, 0x11, 0x9a, 0xbd,
	0x44, 0x9d, 0xfe, 0x01, 0xdb, 0xc6, 0x6c, 0xc1, 0x35, 0x4a, 0x5c, 0x0b, 0x2b, 0x05, 0x78, 0x0c,
	0x60, 0xc0, 0x98, 0x47, 0x82, 0xd9, 0xa5, 0xb9, 0x6c, 0xd4, 0x2f, 0x78, 0x24, 0xe8, 0x11, 0x98,
	0xc3, 0x58, 0xf1, 0x80, 0x41, 0x89, 0x31, 0x89, 0x5c, 0xf1, 0x80, 0xfe, 0xbb, 0xba, 0x67, 0x32,
	0xe3, 0x01, 0x6b, 0xf5, 0xc8, 0xb7, 0x17, 0xfb, 0xff, 0x8c, 0x07, 0x1b, 0xf7, 0x6b, 0x41, 0x4f,
	0x9d, 0x85, 0x41, 0x3c, 0x8e, 0xf3, 0x88, 0x6d, 0x97, 0x9f, 0x93, 0x56, 0x2f, 0xf2, 0x48, 0x1b,
	0x30, 0x2b, 0xe2, 0xf1, 0x0d, 0x6b, 0x97, 0x72, 0x69, 0xe2, 0x82, 0x78, 0x7c, 0x43, 0x4f, 0xa0,
	0x83, 0xe9, 0x97, 0x32, 0xde, 0x29, 0x81, 0x6d, 0x5d, 0xbc, 0x5c, 0xe7, 0xdc, 0x05, 0xf0, 0xc5,
	0x8c, 0xcf, 0x0d, 0xd8, 0xd1, 0xa0, 0x6b, 0xa3, 0x82, 0xe5, 0x3f, 0xa1, 0xaa, 0x5b, 0xb3, 0x5d,
	0x9c, 0xe3, 0xa7, 0x8d, 0x39, 0x2e, 0xc3, 0x20, 0x1e, 0x29, 0x11, 0xb9, 0x88, 0xd0, 0x9f, 0xa1,
	0x91, 0x86, 0xde, 0x38, 0x97, 0x33, 0xf6, 0x83, 0x4e, 0xc6, 0xad, 0xa7, 0xa1, 0xf7, 0x58, 0xce,
	0x74, 0x8b, 0x22, 0xb4, 0x79, 0x2a, 0x18, 0xd5, 0x63, 0x15, 0x33, 0x5f, 0xcd, 0x53, 0x41, 0x07,
	0xb0, 0x6b, 0xca, 0xe2, 0x56, 0xc4, 0xca, 0x40, 0x7b, 0x08, 0xed, 0xa0, 0xfe, 0x9f, 0x96, 0x35,
	0xd9, 0x7f, 0x45, 0x8a, 0xd7, 0x8a, 0x59, 0x75, 0x01, 0xa4, 0xb8, 0xce, 0xe7, 0x26, 0x68, 0x7c,
	0xac, 0xae, 0x8d, 0x0a, 0x96, 0x8f, 0x60, 0x5b, 0x0a, 0x11, 0x2b, 0x59, 0x00, 0x15, 0x04, 0x5a,
	0x85, 0x86, 0xc8, 0xef, 0xd0, 0x31, 0xb3, 0x63, 0xe6, 0x48, 0x59, 0x48, 0xb5, 0x51, 0xd6, 0xf3,
	0xad, 0x3a, 0x71, 0xdf, 0x4f, 0x0a, 0xa4, 0x6a, 0x3a, 0xa1, 0xa2, 0xcb, 0x7d, 0x0f, 0x9a, 0xab,
	0x28, 0xe8, 0x2f, 0x60, 0xe3, 0x65, 0x38, 0x05, 0xfe, 0x21, 0xb8, 0xb8, 0x51, 0x9c, 0xb4, 0x0b,
	0x80, 0xc5, 0x5b, 0x3e, 0xcb, 0x05, 0x1a, 0xb2, 0x5c, 0xc4, 0x9f, 0x68, 0x61, 0xfd, 0x6d, 0xe8,
	0x25, 0x31, 0x1a, 0xb1, 0xcd, 0xb7, 0x23, 0x2f, 0x89, 0xcf, 0x4f, 0x3e, 0x2c, 0x9c, 0xad, 0xfb,
	0x85, 0x43, 0x3e, 0x2d, 0x1c, 0xf2, 0x79, 0xe1, 0x90, 0x17, 0x4b, 0x87, 0xbc, 0x5e, 0x3a, 0xe4,
	0xed, 0xd2, 0x21, 0xef, 0x96, 0x0e, 0xb9, 0x5b, 0x3a, 0xe4, 0xfd, 0xd2, 0x21, 0xf7, 0x4b, 0x87,
	0x7c, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x67, 0xc7, 0xe5, 0x85, 0x05, 0x00, 0x00,
}
